(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{470:function(s,a,e){"use strict";e.r(a);var n=e(2),t=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"_3-1-字段和方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-字段和方法"}},[s._v("#")]),s._v(" 3.1 字段和方法")]),s._v(" "),e("blockquote",[e("p",[s._v("修改时间：2020 年 5 月 11 日 15 点 50 分")])]),s._v(" "),e("h3",{attrs:{id:"readonly-修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#readonly-修饰符"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("READONLY 修饰符")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("readonly")]),s._v(" 修饰符防止字段在构造之后被改变")]),s._v(" "),e("li",[e("code",[s._v("readonly")]),s._v(" 字段只能在声明的时候被赋值，或在构造函数里被赋值")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"字段初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字段初始化"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("字段初始化")])]),s._v(" "),e("ul",[e("li",[s._v("字段可以可选初始化")]),s._v(" "),e("li",[s._v("未初始化的字段有一个默认值")]),s._v(" "),e("li",[s._v("字段的初始化在构造函数之前运行")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"方法的签名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法的签名"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("方法的签名")])]),s._v(" "),e("ul",[e("li",[s._v("类型内方法的签名必须唯一")]),s._v(" "),e("li",[s._v("签名：方法名、参数类型*（含顺序，但与参数名称和返回类型无关）*")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"expression-bodied-方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expression-bodied-方法"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("EXPRESSION-BODIED 方法")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("int Foo (int x) { return x * 2; }\nint Foo (int x) => x * 2;\nvoid Foo (int x) => Console.WriteLine(x);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"方法的重载-overload"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法的重载-overload"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("方法的重载 OVERLOAD")])]),s._v(" "),e("ul",[e("li",[s._v("类型里的方法可以进行重载*（允许多个同名的方法同时存在）*，只要这些方法的签名不同就行")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void Foo (int x) { ... }\nvoid Foo (double x) { ... }\nvoid Foo (int x, float y) { ... }\nvoid Foo (float x, int y) { ... }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void Foo (int x) { ... }\nfloat Foo (int x) { ... }\t\t\t// Compile-time error\n\nvoid Goo (int[] x) { ... }\nvoid Goo (params int[] x) { ... }\t// Compile-time error\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"按值传递-vs-按引用传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#按值传递-vs-按引用传递"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("按值传递 VS 按引用传递")])]),s._v(" "),e("ul",[e("li",[s._v("参数是按值传递的还是按引用传递的，也是方法签名的一部分")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void Foo (int x) { ... }\t\t// 按值传递\nvoid Foo (ref int x) { ... }\t// 按引用传递\nvoid Foo (out int x) { ... }\t// 按引用传递\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("ref")]),s._v("和"),e("code",[s._v("out")]),s._v("都是按照引用传递，参数类型相同")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void Foo (ref int x) { ... }\nvoid Foo (out int x) { ... }\t\t// Compile-time error\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"本地方法（c-7）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地方法（c-7）"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("本地方法（C#7）")])]),s._v(" "),e("ul",[e("li",[s._v("本地方法可以访问外边方法的变量和参数")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("void WriteCubes()\n{\n    Console.WriteLine (Cube(3));\n    Console.WriteLine (Cube(4));\n    Console.WriteLine (Cube(5));\n\n    int Cube (int value) => value * value * value;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("ul",[e("li",[s._v("❗️ 不可以使用 static 修饰符")])]),s._v(" "),e("hr"),s._v(" "),e("h2",{attrs:{id:"_3-2-构造函数与解构函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-构造函数与解构函数"}},[s._v("#")]),s._v(" 3.2 构造函数与解构函数")]),s._v(" "),e("blockquote",[e("p",[s._v("修改时间：2020 年 5 月 11 日 17 点 31 分")])]),s._v(" "),e("h3",{attrs:{id:"构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("构造函数")])]),s._v(" "),e("ul",[e("li",[s._v("运行"),e("code",[s._v("class")]),s._v("或"),e("code",[s._v("struct")]),s._v("的初始化代码")]),s._v(" "),e("li",[s._v("和方法差不多，方法名和类型一致，返回类型也和类型一致，但不写了")]),s._v(" "),e("li",[s._v("C#7 中，允许单语句的构造函数携程 expression-bodied 成员的形式")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"构造函数重载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数重载"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("构造函数重载")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("class")]),s._v("和"),e("code",[s._v("struct")]),s._v("可以重载构造函数")]),s._v(" "),e("li",[s._v("调用重载构造函数时使用"),e("code",[s._v("this")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("using System;\n\npublic class Wine\n{\n    public decimal Price;\n    public int Year;\n    public Wine (decimal price) { Price = price; }\n    public Wine (decimal price, int year) : this (price) { Year = year; }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("ul",[e("li",[s._v("当同一个类型下的构造函数 A 调用构造函数 B 的时候，B 先执行")]),s._v(" "),e("li",[s._v("❗️ ​ 可以把表达式传递给另一个构造函数，但表达式本身不能使用"),e("code",[s._v("this")]),s._v("引用，因为这时候对象还没有被初始化，所以任何方法调用都会失败")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"无参构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#无参构造函数"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("无参构造函数")])]),s._v(" "),e("ul",[e("li",[s._v("对于"),e("code",[s._v("class")]),s._v("，如果你"),e("em",[s._v("没有定义")]),s._v("任何构造函数的话，那么 C#编译器会"),e("em",[s._v("自动生成")]),s._v("一个无参的"),e("code",[s._v("public")]),s._v("构造函数")]),s._v(" "),e("li",[s._v("但是如果你"),e("em",[s._v("定义")]),s._v("了构造函数，那么这个无参的构造函数就"),e("em",[s._v("不会被生成")]),s._v("了")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"构造函数和字段的初始化顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构造函数和字段的初始化顺序"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("构造函数和字段的初始化顺序")])]),s._v(" "),e("ul",[e("li",[e("em",[s._v("字段的初始化发生在构造函数执行之前")])]),s._v(" "),e("li",[s._v("字段按照声明的先后顺序进行初始化")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"deconstructor（c-7）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deconstructor（c-7）"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("DECONSTRUCTOR（C#7）")])]),s._v(" "),e("ul",[e("li",[s._v("C#7 引入了 deconstructor 模式")]),s._v(" "),e("li",[s._v("作用基本和构造函数相反，它会把字段反赋给一堆变量")]),s._v(" "),e("li",[s._v("❗️ 方法名必须是"),e("code",[s._v("Deconstruct")]),s._v("，有一个或多个"),e("code",[s._v("out")]),s._v("参数")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public void Deconstruct(out string name, out int age)\n{\n    name = this.name;\n    age = this.age;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var stu = new Student("Jack"， 18);\nvar (name, age) = stu;\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("Deconstruction 可以被重载")]),s._v(" "),e("li",[s._v("Deconstruction 这个方法可以是扩展方法")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static class Extensions\n{\n    public static void Deconstruct(this Student stu, out string name, out int age)\n    {\n        name = stu.name;\n        age = stu.age;\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('var stu = new Student("Jack", 21);\nstu.Deconstruct(out var name, out var age);\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("hr"),s._v(" "),e("h2",{attrs:{id:"_3-3-对象初始化、this、属性、索引器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-对象初始化、this、属性、索引器"}},[s._v("#")]),s._v(" 3.3 对象初始化、this、属性、索引器")]),s._v(" "),e("blockquote",[e("p",[s._v("修改时间：2020 年 5 月 11 日 23 点 47 分")])]),s._v(" "),e("h3",{attrs:{id:"对象初始化器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象初始化器"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("对象初始化器")])]),s._v(" "),e("ul",[e("li",[s._v("对象任何可访问的字段/属性在构建之后，可通过对象初始化器直接为其进行设定值")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class Bunny\n{\n    public string Name;\n    public bool LikesCarrots;\n    public bool LikesHumans;\n\n    public Bunny () {}\n    public Bunny (string n) { Name = n }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Bunny b1 = new Bunny { Name = "Bo", LikesCarrots = true, LikesHumans = false };\nBunnt b2 = new Bunnt ("Bo") { LikesCarrots = true, LikesHumans = false };\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"对象初始化器-vs-可选参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象初始化器-vs-可选参数"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("对象初始化器 VS 可选参数")])]),s._v(" "),e("ul",[e("li",[s._v("如果不使用初始化器，上例中的构造函数也可以使用可选参数：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public Bunny (string name, bool likesCarrots = false, bool likesHumans = false)\n{\n    Name = name;\n    LikesCarrots = likesCarrots;\n    LikesHumans = likesHumans;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Bunny b1 = new Bunny (name: "Bo", likesCarrots: true);\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("可选参数方式\n"),e("ul",[e("li",[e("em",[s._v("优点")]),s._v("：可以让 Bunny 类的字段/属性只读")]),s._v(" "),e("li",[e("em",[s._v("缺点")]),s._v("：每个可选参数的值都被嵌入到 calling sit，C#会把构造函数的调用翻译成：")])])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('Bunny b1 = new Bunny ("Bo", true, false);\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"this-引用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this-引用"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("THIS 引用")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("this")]),s._v("引用指的是实例的本身")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class Panda\n{\n    public Panda Mate;\n\n    public void Marry (Panda partner)\n    {\n        Mate = partner;\n        partner.Mate = this;\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("this")]),s._v("引用可以让你把字段与本地变量或参数区分开")]),s._v(" "),e("li",[s._v("❗️ 只有"),e("code",[s._v("class/struct")]),s._v("的非静态成员才可以使用"),e("code",[s._v("this")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class Test\n{\n    string name;\n    public Test (string name) { this.name = name; }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"属性-propertyies"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性-propertyies"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("属性 PROPERTYIES")])]),s._v(" "),e("ul",[e("li",[s._v("从外边来看，属性和字段很像。但从内部看，属性含有逻辑，就像方法一样")]),s._v(" "),e("li",[s._v("属性的声明和字段的声明很像，但多了一个"),e("code",[s._v("get set")]),s._v("块。")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class Stock\n{\n    decimal currentPrice;\n\n    public decimal CurrentPrice\n    {\n        get { return currentPrice; }\n        set { currentPrice = value; }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("get/set")]),s._v("代表属性的访问器")]),s._v(" "),e("li",[e("code",[s._v("get")]),s._v("访问器会在属性被"),e("em",[s._v("读取")]),s._v("的时候运行，必须返回一个该属性类型的值")]),s._v(" "),e("li",[e("code",[s._v("set")]),s._v("访问器会在属性被"),e("em",[s._v("赋值")]),s._v("的时候运行，有一个隐式的该类型的参数"),e("code",[s._v("value")]),s._v("，通常你会把"),e("code",[s._v("value")]),s._v("赋给一个"),e("em",[s._v("私有字段")])])]),s._v(" "),e("blockquote",[e("p",[e("em",[s._v("属性与字段的区别")]),s._v("：尽管属性的访问方式与字段的访问方式相同，但不同之处在于，属性赋予了实现者对获取和赋值的完全控制权。这种控制允许实现者选择任意所需的内部表示，"),e("u",[s._v("不向属性的使用者公开其内部实现细节")])])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"只读和计算的属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#只读和计算的属性"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("只读和计算的属性")])]),s._v(" "),e("ul",[e("li",[s._v("如果属性只有"),e("code",[s._v("get")]),s._v("访问器，那么它是"),e("em",[s._v("只读")]),s._v("的")]),s._v(" "),e("li",[s._v("如果只有"),e("code",[s._v("set")]),s._v("访问器，那么它就是只写的（很少这样用）")]),s._v(" "),e("li",[s._v("属性通常拥有一个专用的“幕后”字段（backing field），这个幕后字段用来存储数据")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("decimal currentPrice, shareOwned;\n\npublic deciaml Worth\n{\n    get { return currentPrice * sharesOwned; }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"expression-bodied-属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#expression-bodied-属性"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("EXPRESSION_BODIED 属性")])]),s._v(" "),e("ul",[e("li",[s._v("从 C#6 开始，你可以使用 Expression-bodied 形式来表示只读属性")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public decimal Worth => currentPrice * sharesOwned;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("C#7，允许"),e("code",[s._v("set")]),s._v("访问器也使用该形式")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public decimal Worth\n{\n    get => currentPrice * sharesOwned;\n    set => sharesOwned = value / currentPrice;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"自动属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动属性"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("自动属性")])]),s._v(" "),e("ul",[e("li",[s._v("属性最常见的一种实践就是：getter 和 setter 只是对 private field 进行简单直接的读写")]),s._v(" "),e("li",[s._v("自动属性声明就告诉编译器来提供这种实现")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("pulbic class Stock\n{\n    ...\n\t\tpublic decimal CurrentPrice { get; set; }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("编译器会自动生成一个私有的幕后字段，❗️ 其名称不可以引用（由编译器生成）")]),s._v(" "),e("li",[e("em",[e("code",[s._v("set")]),s._v("访问器也可以是"),e("code",[s._v("private")]),s._v("或"),e("code",[s._v("protected")])])])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"属性初始化器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#属性初始化器"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("属性初始化器")])]),s._v(" "),e("ul",[e("li",[s._v("从 C#6 开始，你可以为自动属性添加属性初始化器")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public decimal CurrentPrice { get; set; } = 123;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[e("em",[s._v("只读的自动属性也可以使用（只读自动属性也可以在构造函数里被赋值）")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public int Maximum { get; } = 999;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"get-和-set-的访问性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-和-set-的访问性"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("GET 和 SET 的访问性")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("get")]),s._v("和"),e("code",[s._v("set")]),s._v("访问器可以拥有不同的访问级别\n"),e("ul",[e("li",[e("em",[s._v("典型用法")]),s._v("："),e("code",[s._v("public get")]),s._v("，"),e("code",[s._v("internal/private set")])])])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class Foo\n{\n    private decimal x;\n    public decimal X\n    {\n        get\t{ return x; }\n        private set { x = Math.Round (value, 2); }\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("ul",[e("li",[s._v("❗️ 注意，属性的访问级别更“宽松”一些，访问器的访问级别更“严”一些")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"索引器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引器"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("索引器")])]),s._v(" "),e("ul",[e("li",[s._v("索引器提供了一种可以访问封装了列表值或字典值的"),e("code",[s._v("class/struct")]),s._v("的元素的一种自然的语法")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("string s = \"hello\";\nConsole.WriteLine (s[0]);\t// 'h'\nConsole.WriteLine (s[3]);\t// 'l'\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("语法很像使用数组时用的语法，但是这里的索引参数可以是任何类型的")]),s._v(" "),e("li",[s._v("索引器和属性拥有同样的修饰符")]),s._v(" "),e("li",[s._v("可以按照下列方式使用 null 条件操作符")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("string s = null;\nConsole.WriteLine (s?[0]);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("实现索引器：需要定义一个"),e("em",[s._v("this")]),s._v("属性，并通过中括号指定参数")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('class Sentence\n{\n    string[] words = "The quick brown fox".Split();\n\n    public string this [int wordNum]\t// indexer\n    {\n        get { return words [wordNum]; }\n        set { words [wordNum] = value; }\n    }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("ul",[e("li",[s._v("一个索引器可以声明多个索引器，它们的参数类型可以不同")]),s._v(" "),e("li",[s._v("一个索引器可以有多个参数")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public string this [int arg1, string arg2]\n{\n    get { ... } set { ... }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("如果不写"),e("code",[s._v("set")]),s._v("访问器，那么这个索引器就是"),e("em",[s._v("只读")]),s._v("的")]),s._v(" "),e("li",[s._v("在 C#6 以后，也可以使用 expression-bodied 语法")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public string this [int wordNum] => words [wordNum];\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("hr"),s._v(" "),e("h2",{attrs:{id:"_3-4-常量、静态构造函数和类、终结器、局部类和方法、nameof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-常量、静态构造函数和类、终结器、局部类和方法、nameof"}},[s._v("#")]),s._v(" 3.4 常量、静态构造函数和类、终结器、局部类和方法、nameof")]),s._v(" "),e("blockquote",[e("p",[s._v("修改时间：2020 年 5 月 13 日 15 点 35 分")])]),s._v(" "),e("h3",{attrs:{id:"常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("常量")])]),s._v(" "),e("ul",[e("li",[s._v("一个"),e("em",[s._v("值不可以改变")]),s._v("的"),e("em",[s._v("静态字段")])]),s._v(" "),e("li",[s._v("在"),e("em",[s._v("编译时")]),s._v("值就已经定下来了")]),s._v(" "),e("li",[s._v("任何使用常量的地方，编译器都会把这个常量值替换为它的值")]),s._v(" "),e("li",[s._v("常量的类型可以是内置的数值类型、bool、char、string 或 enum")]),s._v(" "),e("li",[s._v("❗️ 使用 const 关键字声明，声明的同时必须使用具体的值来对比其初始化")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('public class Test\n{\n    public const string Message = "Hello World";\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"常量与静态只读字段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量与静态只读字段"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("常量与静态只读字段")])]),s._v(" "),e("ul",[e("li",[s._v("常量比静态字段更严格:\n"),e("ul",[e("li",[s._v("可使用的类型")]),s._v(" "),e("li",[s._v("字段初始化的语义上")])])]),s._v(" "),e("li",[s._v("常量是再编译时进行值的估算的")])]),s._v(" "),e("blockquote",[e("p",[e("em",[s._v("注意")]),s._v("：当值有可能改变，并且需要暴露给其他 Assembly 的时候，静态只读字段是相对较好的选择")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"本地常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地常量"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("本地常量")])]),s._v(" "),e("ul",[e("li",[s._v("方法里可以有本地的常量")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("static void Main()\n{\n    const double twoPI = 2 * System.Math.PI;\n    \t...\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"静态构造函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态构造函数"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("静态构造函数")])]),s._v(" "),e("ul",[e("li",[s._v("静态构造函数，每个"),e("em",[s._v("类型")]),s._v("执行一次")]),s._v(" "),e("li",[s._v("非静态构造函数，每个"),e("em",[s._v("实例")]),s._v("执行一次")]),s._v(" "),e("li",[s._v("❗️ 一个类型只能定义一个静态构造函数\n"),e("ul",[e("li",[s._v("必须无参")]),s._v(" "),e("li",[s._v("方法名与类型一致")])])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('class Test\n{\n    static Test() { Console.WriteLine ("Type Initialized"); }\n}\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[s._v("在类型使用之前的一瞬间，编译器会自动调用类型的静态构造函数\n"),e("ul",[e("li",[s._v("实例化一个实例")]),s._v(" "),e("li",[s._v("访问类型的一个静态成员")])])]),s._v(" "),e("li",[s._v("❗️ 只允许使用"),e("code",[s._v("unsafe")]),s._v("和"),e("code",[s._v("extern")]),s._v("修饰符")])]),s._v(" "),e("blockquote",[e("p",[e("em",[s._v("注意")]),s._v("：如果静态构造函数抛出了未处理的异常，那么这个类型在该程序的剩余声明周期将无法使用了")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"初始化顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化顺序"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("初始化顺序")])]),s._v(" "),e("ul",[e("li",[s._v("静态字段的初始化器在静态构造函数被调用之前的一瞬间运行")]),s._v(" "),e("li",[s._v("如果类型没有静态构造函数，那么静态字段初始化器在类型被使用之前的一瞬间执行，或者在运行时突发奇想的时候执行")]),s._v(" "),e("li",[s._v("静态字段的初始化顺序与它们的声明顺序一致")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Foo\n{\n    public static int X = Y;\t\t// 0\n    public static int Y = X;\t\t// 3\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Program\n{\n    static void Main() { Console.WriteLine (Foo.X); }\t// 3\n}\n\nclass Foo\n{\n    public static Foo Instance = new Foo();\n    public static int X = 3;\n\n    Foo() { Console.WriteLine (x); }\t// 0\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"静态类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#静态类"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("静态类")])]),s._v(" "),e("ul",[e("li",[s._v("类也可以是静态的")]),s._v(" "),e("li",[s._v("其成员必须全是静态的")]),s._v(" "),e("li",[s._v("不可以有子类")]),s._v(" "),e("li",[s._v("例如\n"),e("ul",[e("li",[e("code",[s._v("System.Console")])]),s._v(" "),e("li",[e("code",[s._v("System.Math")])])])])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"finalizer-析构函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#finalizer-析构函数"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("FINALIZER 析构函数")])]),s._v(" "),e("ul",[e("li",[s._v("Finalizer 是 class 专有的一种方法")]),s._v(" "),e("li",[s._v("在 GC 回收未引用对象的内存之前运行")]),s._v(" "),e("li",[s._v("其实就是对 object 的 Finalize()方法重写的一种语法")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Class1\n{\n    ~Class1()\n    {\n        ...\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"partial-type-局部类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#partial-type-局部类型"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("PARTIAL TYPE 局部类型")])]),s._v(" "),e("ul",[e("li",[s._v("允许一个类型的定义分布在多个地方（文件）")]),s._v(" "),e("li",[s._v("典型应用：一个类的一部分是自动生成的，另一部分需要手动写代码")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// PaymentFormGen.cs - auto-generated\npartial class PaymentForm { ... }\n\n// PaymentForm.cs - hand-authored\npartial class PaymentForm { ... }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("每个分布的类型都必须使用"),e("code",[s._v("partial")]),s._v("来声明")]),s._v(" "),e("li",[s._v("❎ 下面这个例子就会报错：")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("partial class PaymentForm {}\nclass PaymentForm {}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("❗️ 每个分布类的成员不能冲突，不能有同样参数的构造函数")]),s._v(" "),e("li",[s._v("各分布类完全靠编译器来进行解析：❗️ 每个分布类在编译时必须可用，且在一个 Assembly 里")]),s._v(" "),e("li",[s._v("如果有父类，可以在一个或多个分布类上指明，但必须一致")]),s._v(" "),e("li",[s._v("每个分布类可以独立的实现不同的接口")]),s._v(" "),e("li",[s._v("编译器无法保证各分布类的字段的初始化顺序")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"partial-method-局部方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#partial-method-局部方法"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("PARTIAL METHOD 局部方法")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("partial")]),s._v("类型可以有 partial method")]),s._v(" "),e("li",[s._v("自动生成的分布类里可以有 partial method，通常作为“钩子”使用，在另一部分的 partial method 里，我们可以对这个方法进行自定义")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("partial class PaymentForm\t\t// In auto-generated file\n{\n    ...\n    partial void ValidatePayment (decimal amout);\n}\n\npartial class PaymentForm\t\t// In hand-authored file\n{\n    ...\n    partial void ValidatePayment (deciaml amout)\n    {\n      if (amout > 100)\n          ...\n    }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("ul",[e("li",[s._v("partial method 由两部分组成：定义和实现")]),s._v(" "),e("li",[s._v("定义部分通常是"),e("em",[s._v("自动生成")]),s._v("的")]),s._v(" "),e("li",[s._v("实现部分通常时"),e("em",[s._v("手动编写")]),s._v("的")]),s._v(" "),e("li",[s._v("如果 partial method 只有定义，没有实现，那么编译的时候该方法定义就没有了，调用该方法的代码也没有了。这就允许自动生成的代码可以自由的提供钩子，不用担心代码膨胀")]),s._v(" "),e("li",[s._v("partial method 必须是"),e("code",[s._v("void")]),s._v("，并且隐式"),e("code",[s._v("private")]),s._v("的")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"nameof-操作符-c-6"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nameof-操作符-c-6"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("NAMEOF 操作符 C#6")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("nameof")]),s._v("操作符会返回任何符号（类型、成员、变量...)的名字（string）")]),s._v(" "),e("li",[s._v("利于重构")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('int count = 123;\nstring name = nameof (count);\t// name is "count"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('string name = nameof (StringBuilder.Length);\t// name is "Length"\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("hr"),s._v(" "),e("h2",{attrs:{id:"_3-5-继承、多态、引用转换、virtual"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-继承、多态、引用转换、virtual"}},[s._v("#")]),s._v(" 3.5 继承、多态、引用转换、virtual")]),s._v(" "),e("blockquote",[e("p",[s._v("修改时间：2020 年 5 月 14 日 11 点 56 分")])]),s._v(" "),e("h3",{attrs:{id:"继承"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("继承")])]),s._v(" "),e("ul",[e("li",[s._v("一个类可以继承另一个类，从而对原有类进行扩展和自定义")]),s._v(" "),e("li",[s._v("可以叫做子类和父类")]),s._v(" "),e("li",[s._v("继承的类让你可以重用被继承的功能")]),s._v(" "),e("li",[s._v("C#里，"),e("em",[s._v("一个类只能继承于一个类，但是这个类却可以被多个类继承")])])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"多态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("多态")])]),s._v(" "),e("ul",[e("li",[s._v("引用是多态的，类型为 x 的变量可以引用其子类的对象")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public static void Display (Assset asset)\n{\n    System.Console.WriteLine (asset.Name);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Stock msft = new Stock ...;\nHouse mansion = new House ...;\n\nDisplay (msft);\nDisplay (mansion);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("ul",[e("li",[s._v("因为子类具有父类的全部功能特性，所以参数可以是子类")]),s._v(" "),e("li",[s._v("❗️ 反过来则不行")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("static void Main() { Display (new Asset()); }\t// Compile-time error\n\npublic static void Display (House house)\t// Will not accept Asset\n{\n    System.Console.WriteLine (house.Mortgage);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"引用转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引用转换"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("引用转换")])]),s._v(" "),e("ul",[e("li",[s._v("一个对象的引用可以"),e("em",[s._v("隐式")]),s._v("转换到其父类的引用（向上转换）")]),s._v(" "),e("li",[s._v("想转换到子类的引用则需要"),e("em",[s._v("显式")]),s._v("转换（向下转换）")]),s._v(" "),e("li",[s._v("引用转换："),e("em",[s._v("创建了一个新的引用，它也指向同一个对象")])])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"向上转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向上转换"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("向上转换")])]),s._v(" "),e("ul",[e("li",[s._v("从子类的引用创建父类的引用")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Stock msft = new Stock();\nAsset a = msft;\t\t\t// Upcast\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[s._v("变量 a 依然指向同一个 Stock 对象（msft 也指向它）")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Console.WriteLine (a == msft);\t\t\t// True\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("ul",[e("li",[s._v("尽管变量 a 和 msft 指向同一个对象，但是 a 的可视范围更小一些")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Console.WriteLine (a.Name);\t\t\t// OK\nConsole.WriteLine (a.ShareOwned);\t// Error: SharesOwned undefined\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"向下转换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向下转换"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("向下转换")])]),s._v(" "),e("ul",[e("li",[s._v("从父类的引用创建出子类的引用")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Stock msft = new Stock();\nAsset a = msft;\t\t\t\t\t\t\t// Upcast\nStock s = (Stock)a;\t\t\t\t\t\t// Downcast\nConsole.WriteLine (s.SharesOwned);\t\t// <No error>\nCOnsole.WriteLine (s == a);\t\t\t\t// True\nConsole.WriteLine (s == msft);\t\t\t// True\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("和向上转换一样，只涉及到引用，底层的对象不会受影响")]),s._v(" "),e("li",[s._v("需要显式转换，因为可能会失败")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("House h = new House();\nAsset a = h;\t\t\t\t// Upcast always succeeds\nStock s = (Stock)a;\t\t\t// Downcast fails: a is not a Stock\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("ul",[e("li",[s._v("如果向下转换失败，那么会抛出 InvalidCasstException（属于运行时类型检查）")])]),s._v(" "),e("hr"),s._v(" "),e("h3",{attrs:{id:"as-操作符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#as-操作符"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("AS 操作符")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("as")]),s._v("操作符会执行向下转换，如果转换失败，"),e("em",[s._v("不会抛出异常")]),s._v("，值会变为"),e("code",[s._v("null")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Asset a = new Asset();\nStock s = a as Stock;\t\t// s is null; no exception thrown\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("as")]),s._v("操作符无法做自定义转换")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("long x = 3 as long;\t\t// Compile-time error\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"is-操作符和模式变量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#is-操作符和模式变量"}},[s._v("#")]),s._v(" ☑️ "),e("strong",[s._v("IS 操作符和模式变量")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("is")]),s._v("操作符会检验引用的转换是否成功。换句话说，判断对象是否派生于某个类（或者实现了某个接口）")]),s._v(" "),e("li",[s._v("通常用于向下转换前的验证")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (as is Stock)\n    Console.WriteLine (((Stock)a).ShareOwned);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("ul",[e("li",[e("p",[s._v("如果拆箱转换可以成功的话，那么使用"),e("code",[s._v("is")]),s._v("操作符的结果会是"),e("code",[s._v("true")])])]),s._v(" "),e("li",[e("p",[s._v("C#7 里，在使用"),e("code",[s._v("is")]),s._v("操作符的时候，可以引入一个变量")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("if (a is Stock s)\n    Console.WriteLine (s.SharesOwned);\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("Stock s;\nif (a is Stock)\n{\n    s = (Stock) a;\n    Console.WriteLine (s.SharesOwned);\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br")])]),e("ul",[e("li",[s._v("引用的变量可以立即“消费”")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('if (a is Stock s && s.SharesOwned > 100000)\n    Console.WriteLine ("Wealthy");\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('if (a is Stock s && s.SharesOwned > 100000)\n    Console.WriteLine ("Wealthy");\nelse\n    s = new Stock();\t// s is in scope\nConsole.WriteLine (s.ShareOwned);\t// Still in scope\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"virtual-函数成员"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#virtual-函数成员"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("VIRTUAL 函数成员")])]),s._v(" "),e("ul",[e("li",[s._v("标记为"),e("code",[s._v("virtual")]),s._v("的函数可以被子类重写，包括"),e("em",[s._v("方法、属性、索引器、事件")])])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class Asset\n{\n    public string Name;\n    public virtual decimal Liability => 0;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("hr"),s._v(" "),e("h3",{attrs:{id:"override-重写"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#override-重写"}},[s._v("#")]),s._v(" ⭐️ "),e("strong",[s._v("OVERRIDE 重写")])]),s._v(" "),e("ul",[e("li",[s._v("使用"),e("code",[s._v("override")]),s._v("修饰符，子类可以重写父类的函数")])]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("public class Stock : Asset\n{\n    public long SharesOwned;\n}\n\npublic class House : Asset\n{\n    public decimal Mortgage;\n    public override decimal Liability => Mortgage;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br")])]),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('House mansion = new House { Name = "McMansion", Mortgage = 250000 };\nAsset a = mansion;\nConsole.WriteLine (mansion.Liability);\t// 250000\nConsole.WriteLine (a.Liability);\t\t// 250000\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("ul",[e("li",[e("code",[s._v("virtual")]),s._v("方法和重写方法的"),e("em",[s._v("签名、返回类型、可访问程度")]),s._v("必须是"),e("em",[s._v("一致")]),s._v("的")]),s._v(" "),e("li",[s._v("重写方法里使用 base 关键字可以调用父类的是实现")])]),s._v(" "),e("blockquote",[e("p",[e("em",[s._v("注意")]),s._v("：在构造函数里调用"),e("code",[s._v("virtual")]),s._v("方法可能比较危险，因为编写子类的开发人员可能不知道他们在重写方法的时候，面对的是一个未完全初始化的对象。")]),s._v(" "),e("p",[s._v("换句话说，"),e("u",[s._v("重写的方法可能会访问依赖于还未被构造函数初始化的字段的属性或方法")])])]),s._v(" "),e("hr")])}),[],!1,null,null,null);a.default=t.exports}}]);